
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.0
// timestamp : Fri Mar 11 05:56:47 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64F/rv64f_fmv.x.w.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.x.w instruction of the RISC-V RV64F extension for the fmv.x.w_b27 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmv.x.w_b27)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==f16, rd==x27, fs1 == 0 and fe1 == 0xff and fm1 == 0x000001 and rm_val == 0  
// opcode: fmv.x.w ; op1:f16; dest:x27; op1val:0x7f800001; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x27, f16, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==f10, rd==x2, fs1 == 1 and fe1 == 0xff and fm1 == 0x455555 and rm_val == 0  
// opcode: fmv.x.w ; op1:f10; dest:x2; op1val:0xffc55555; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x2, f10, 0x0, 0, x16, 4, x17, x15, 16, x18)

inst_2:// rs1==f30, rd==x19, fs1 == 0 and fe1 == 0xff and fm1 == 0x455555 and rm_val == 0  
// opcode: fmv.x.w ; op1:f30; dest:x19; op1val:0x7fc55555; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x19, f30, 0x0, 0, x16, 8, x17, x15, 32, x18)

inst_3:// rs1==f14, rd==x28, fs1 == 1 and fe1 == 0xff and fm1 == 0x400001 and rm_val == 0  
// opcode: fmv.x.w ; op1:f14; dest:x28; op1val:0xffc00001; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x28, f14, 0x0, 0, x16, 12, x17, x15, 48, x18)

inst_4:// rs1==f5, rd==x22, fs1 == 0 and fe1 == 0xff and fm1 == 0x400001 and rm_val == 0  
// opcode: fmv.x.w ; op1:f5; dest:x22; op1val:0x7fc00001; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x22, f5, 0x0, 0, x16, 16, x17, x15, 64, x18)

inst_5:// rs1==f22, rd==x30, fs1 == 1 and fe1 == 0xff and fm1 == 0x2aaaaa and rm_val == 0  
// opcode: fmv.x.w ; op1:f22; dest:x30; op1val:0xffaaaaaa; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x30, f22, 0x0, 0, x16, 20, x17, x15, 80, x18)

inst_6:// rs1==f9, rd==x21, fs1 == 0 and fe1 == 0xff and fm1 == 0x2aaaaa and rm_val == 0  
// opcode: fmv.x.w ; op1:f9; dest:x21; op1val:0x7faaaaaa; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x21, f9, 0x0, 0, x16, 24, x17, x15, 96, x18)

inst_7:// rs1==f15, rd==x20, fs1 == 1 and fe1 == 0xff and fm1 == 0x000001 and rm_val == 0  
// opcode: fmv.x.w ; op1:f15; dest:x20; op1val:0xff800001; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x20, f15, 0x0, 0, x16, 28, x17, x15, 112, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_8:// rs1==f27, rd==x16, 
// opcode: fmv.x.w ; op1:f27; dest:x16; op1val:0x0; valaddr_reg:x20; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x16, f27, 0x0, 0, x20, 32, x21, x19, 0, x18)

inst_9:// rs1==f20, rd==x17, 
// opcode: fmv.x.w ; op1:f20; dest:x17; op1val:0x0; valaddr_reg:x20; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x17, f20, 0x0, 0, x20, 36, x21, x19, 16, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_10:// rs1==f23, rd==x23, 
// opcode: fmv.x.w ; op1:f23; dest:x23; op1val:0x0; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x23, f23, 0x0, 0, x16, 40, x17, x15, 0, x18)

inst_11:// rs1==f7, rd==x31, 
// opcode: fmv.x.w ; op1:f7; dest:x31; op1val:0x0; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x31, f7, 0x0, 0, x16, 44, x17, x15, 16, x18)

inst_12:// rs1==f1, rd==x24, 
// opcode: fmv.x.w ; op1:f1; dest:x24; op1val:0x0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x24, f1, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_13:// rs1==f17, rd==x7, 
// opcode: fmv.x.w ; op1:f17; dest:x7; op1val:0x0; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x7, f17, 0x0, 0, x16, 52, x17, x15, 48, x18)

inst_14:// rs1==f4, rd==x4, 
// opcode: fmv.x.w ; op1:f4; dest:x4; op1val:0x0; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x4, f4, 0x0, 0, x16, 56, x17, x15, 64, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_15:// rs1==f8, rd==x15, 
// opcode: fmv.x.w ; op1:f8; dest:x15; op1val:0x0; valaddr_reg:x20; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x15, f8, 0x0, 0, x20, 60, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_16:// rs1==f2, rd==x9, 
// opcode: fmv.x.w ; op1:f2; dest:x9; op1val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x9, f2, 0x0, 0, x16, 64, x17, x15, 0, x18)

inst_17:// rs1==f18, rd==x29, 
// opcode: fmv.x.w ; op1:f18; dest:x29; op1val:0x0; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x29, f18, 0x0, 0, x16, 68, x17, x15, 16, x18)

inst_18:// rs1==f26, rd==x6, 
// opcode: fmv.x.w ; op1:f26; dest:x6; op1val:0x0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x6, f26, 0x0, 0, x16, 72, x17, x15, 32, x18)

inst_19:// rs1==f12, rd==x11, 
// opcode: fmv.x.w ; op1:f12; dest:x11; op1val:0x0; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x11, f12, 0x0, 0, x16, 76, x17, x15, 48, x18)

inst_20:// rs1==f13, rd==x3, 
// opcode: fmv.x.w ; op1:f13; dest:x3; op1val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x3, f13, 0x0, 0, x16, 80, x17, x15, 64, x18)

inst_21:// rs1==f21, rd==x13, 
// opcode: fmv.x.w ; op1:f21; dest:x13; op1val:0x0; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x13, f21, 0x0, 0, x16, 84, x17, x15, 80, x18)

inst_22:// rs1==f3, rd==x1, 
// opcode: fmv.x.w ; op1:f3; dest:x1; op1val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x1, f3, 0x0, 0, x16, 88, x17, x15, 96, x18)

inst_23:// rs1==f11, rd==x25, 
// opcode: fmv.x.w ; op1:f11; dest:x25; op1val:0x0; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x25, f11, 0x0, 0, x16, 92, x17, x15, 112, x18)

inst_24:// rs1==f19, rd==x0, 
// opcode: fmv.x.w ; op1:f19; dest:x0; op1val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x0, f19, 0x0, 0, x16, 96, x17, x15, 128, x18)

inst_25:// rs1==f24, rd==x26, 
// opcode: fmv.x.w ; op1:f24; dest:x26; op1val:0x0; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x26, f24, 0x0, 0, x16, 100, x17, x15, 144, x18)

inst_26:// rs1==f28, rd==x5, 
// opcode: fmv.x.w ; op1:f28; dest:x5; op1val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x5, f28, 0x0, 0, x16, 104, x17, x15, 160, x18)

inst_27:// rs1==f29, rd==x14, 
// opcode: fmv.x.w ; op1:f29; dest:x14; op1val:0x0; valaddr_reg:x16; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x14, f29, 0x0, 0, x16, 108, x17, x15, 176, x18)

inst_28:// rs1==f25, rd==x18, 
// opcode: fmv.x.w ; op1:f25; dest:x18; op1val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x22
TEST_FPID_OP(fmv.x.w, x18, f25, 0x0, 0, x16, 112, x17, x15, 192, x22)

inst_29:// rs1==f0, rd==x12, 
// opcode: fmv.x.w ; op1:f0; dest:x12; op1val:0x0; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x12, f0, 0x0, 0, x16, 116, x17, x15, 208, x18)

inst_30:// rs1==f31, rd==x10, 
// opcode: fmv.x.w ; op1:f31; dest:x10; op1val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x10, f31, 0x0, 0, x16, 120, x17, x15, 224, x18)

inst_31:// rs1==f6, rd==x8, 
// opcode: fmv.x.w ; op1:f6; dest:x8; op1val:0x0; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x8, f6, 0x0, 0, x16, 124, x17, x15, 240, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.word 0x7f800001
.word 0xffc55555
.word 0x7fc55555
.word 0xffc00001
.word 0x7fc00001
.word 0xffaaaaaa
.word 0x7faaaaaa
.word 0xff800001
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 10*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END

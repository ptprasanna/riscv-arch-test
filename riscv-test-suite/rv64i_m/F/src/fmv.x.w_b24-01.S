
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.0
// timestamp : Fri Mar 11 05:56:47 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64F/rv64f_fmv.x.w.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.x.w instruction of the RISC-V RV64F extension for the fmv.x.w_b24 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IF")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmv.x.w_b24)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==f13, rd==x3, fs1 == 0 and fe1 == 0x7f and fm1 == 0x0ccccc and rm_val == 0  
// opcode: fmv.x.w ; op1:f13; dest:x3; op1val:0x3f8ccccc; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x3, f13, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==f25, rd==x28, fs1 == 1 and fe1 == 0x7f and fm1 == 0x000000 and rm_val == 0  
// opcode: fmv.x.w ; op1:f25; dest:x28; op1val:0xbf800000; valaddr_reg:x16; val_offset:4; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x28, f25, 0x0, 0, x16, 4, x17, x15, 16, x18)

inst_2:// rs1==f6, rd==x6, fs1 == 0 and fe1 == 0x7e and fm1 == 0x666666 and rm_val == 0  
// opcode: fmv.x.w ; op1:f6; dest:x6; op1val:0x3f666666; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x6, f6, 0x0, 0, x16, 8, x17, x15, 32, x18)

inst_3:// rs1==f18, rd==x1, fs1 == 0 and fe1 == 0x7e and fm1 == 0x63d70a and rm_val == 0  
// opcode: fmv.x.w ; op1:f18; dest:x1; op1val:0x3f63d70a; valaddr_reg:x16; val_offset:12; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x1, f18, 0x0, 0, x16, 12, x17, x15, 48, x18)

inst_4:// rs1==f24, rd==x14, fs1 == 0 and fe1 == 0x7e and fm1 == 0x7d70a3 and rm_val == 0  
// opcode: fmv.x.w ; op1:f24; dest:x14; op1val:0x3f7d70a3; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x14, f24, 0x0, 0, x16, 16, x17, x15, 64, x18)

inst_5:// rs1==f16, rd==x29, fs1 == 0 and fe1 == 0x7b and fm1 == 0x6147ae and rm_val == 0  
// opcode: fmv.x.w ; op1:f16; dest:x29; op1val:0x3de147ae; valaddr_reg:x16; val_offset:20; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x29, f16, 0x0, 0, x16, 20, x17, x15, 80, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_6:// rs1==f0, rd==x16, fs1 == 1 and fe1 == 0x7e and fm1 == 0x7d70a3 and rm_val == 0  
// opcode: fmv.x.w ; op1:f0; dest:x16; op1val:0xbf7d70a3; valaddr_reg:x20; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x16, f0, 0x0, 0, x20, 24, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_7:// rs1==f12, rd==x19, fs1 == 1 and fe1 == 0x7b and fm1 == 0x4ccccc and rm_val == 0  
// opcode: fmv.x.w ; op1:f12; dest:x19; op1val:0xbdcccccc; valaddr_reg:x16; val_offset:28; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x19, f12, 0x0, 0, x16, 28, x17, x15, 0, x18)

inst_8:// rs1==f26, rd==x11, fs1 == 1 and fe1 == 0x7e and fm1 == 0x666666 and rm_val == 0  
// opcode: fmv.x.w ; op1:f26; dest:x11; op1val:0xbf666666; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x11, f26, 0x0, 0, x16, 32, x17, x15, 16, x18)

inst_9:// rs1==f23, rd==x12, fs1 == 1 and fe1 == 0x7b and fm1 == 0x6147ae and rm_val == 0  
// opcode: fmv.x.w ; op1:f23; dest:x12; op1val:0xbde147ae; valaddr_reg:x16; val_offset:36; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x12, f23, 0x0, 0, x16, 36, x17, x15, 32, x18)

inst_10:// rs1==f28, rd==x18, fs1 == 0 and fe1 == 0x78 and fm1 == 0x23d70a and rm_val == 0  
// opcode: fmv.x.w ; op1:f28; dest:x18; op1val:0x3c23d70a; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x22
TEST_FPID_OP(fmv.x.w, x18, f28, 0x0, 0, x16, 40, x17, x15, 48, x22)

inst_11:// rs1==f2, rd==x27, fs1 == 0 and fe1 == 0x7f and fm1 == 0x000000 and rm_val == 0  
// opcode: fmv.x.w ; op1:f2; dest:x27; op1val:0x3f800000; valaddr_reg:x16; val_offset:44; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x27, f2, 0x0, 0, x16, 44, x17, x15, 64, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_12:// rs1==f22, rd==x15, fs1 == 0 and fe1 == 0x7f and fm1 == 0x0e147a and rm_val == 0  
// opcode: fmv.x.w ; op1:f22; dest:x15; op1val:0x3f8e147a; valaddr_reg:x20; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x15, f22, 0x0, 0, x20, 48, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_13:// rs1==f20, rd==x26, fs1 == 1 and fe1 == 0x78 and fm1 == 0x23d70a and rm_val == 0  
// opcode: fmv.x.w ; op1:f20; dest:x26; op1val:0xbc23d70a; valaddr_reg:x16; val_offset:52; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x26, f20, 0x0, 0, x16, 52, x17, x15, 0, x18)

inst_14:// rs1==f15, rd==x8, fs1 == 1 and fe1 == 0x7f and fm1 == 0x0ccccc and rm_val == 0  
// opcode: fmv.x.w ; op1:f15; dest:x8; op1val:0xbf8ccccc; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x8, f15, 0x0, 0, x16, 56, x17, x15, 16, x18)

inst_15:// rs1==f7, rd==x31, fs1 == 0 and fe1 == 0x7b and fm1 == 0x4ccccc and rm_val == 0  
// opcode: fmv.x.w ; op1:f7; dest:x31; op1val:0x3dcccccc; valaddr_reg:x16; val_offset:60; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x31, f7, 0x0, 0, x16, 60, x17, x15, 32, x18)

inst_16:// rs1==f4, rd==x30, fs1 == 0 and fe1 == 0x7f and fm1 == 0x0147ae and rm_val == 0  
// opcode: fmv.x.w ; op1:f4; dest:x30; op1val:0x3f8147ae; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x30, f4, 0x0, 0, x16, 64, x17, x15, 48, x18)

inst_17:// rs1==f3, rd==x13, fs1 == 0 and fe1 == 0x00 and fm1 == 0x0007f0 and rm_val == 0  
// opcode: fmv.x.w ; op1:f3; dest:x13; op1val:0x7f0; valaddr_reg:x16; val_offset:68; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x13, f3, 0x0, 0, x16, 68, x17, x15, 64, x18)

inst_18:// rs1==f5, rd==x0, fs1 == 1 and fe1 == 0x7f and fm1 == 0x0147ae and rm_val == 0  
// opcode: fmv.x.w ; op1:f5; dest:x0; op1val:0xbf8147ae; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x0, f5, 0x0, 0, x16, 72, x17, x15, 80, x18)

inst_19:// rs1==f9, rd==x22, fs1 == 1 and fe1 == 0x7f and fm1 == 0x0e147a and rm_val == 0  
// opcode: fmv.x.w ; op1:f9; dest:x22; op1val:0xbf8e147a; valaddr_reg:x16; val_offset:76; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x22, f9, 0x0, 0, x16, 76, x17, x15, 96, x18)

inst_20:// rs1==f19, rd==x21, fs1 == 1 and fe1 == 0x7e and fm1 == 0x63d70a and rm_val == 0  
// opcode: fmv.x.w ; op1:f19; dest:x21; op1val:0xbf63d70a; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x21, f19, 0x0, 0, x16, 80, x17, x15, 112, x18)

inst_21:// rs1==f29, rd==x25, 
// opcode: fmv.x.w ; op1:f29; dest:x25; op1val:0x0; valaddr_reg:x16; val_offset:84; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x25, f29, 0x0, 0, x16, 84, x17, x15, 128, x18)

inst_22:// rs1==f11, rd==x10, 
// opcode: fmv.x.w ; op1:f11; dest:x10; op1val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x10, f11, 0x0, 0, x16, 88, x17, x15, 144, x18)

inst_23:// rs1==f31, rd==x20, 
// opcode: fmv.x.w ; op1:f31; dest:x20; op1val:0x0; valaddr_reg:x16; val_offset:92; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x20, f31, 0x0, 0, x16, 92, x17, x15, 160, x18)

inst_24:// rs1==f17, rd==x2, 
// opcode: fmv.x.w ; op1:f17; dest:x2; op1val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x2, f17, 0x0, 0, x16, 96, x17, x15, 176, x18)

inst_25:// rs1==f14, rd==x7, 
// opcode: fmv.x.w ; op1:f14; dest:x7; op1val:0x0; valaddr_reg:x16; val_offset:100; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x7, f14, 0x0, 0, x16, 100, x17, x15, 192, x18)

inst_26:// rs1==f1, rd==x9, 
// opcode: fmv.x.w ; op1:f1; dest:x9; op1val:0x0; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x9, f1, 0x0, 0, x16, 104, x17, x15, 208, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_2)

inst_27:// rs1==f30, rd==x17, 
// opcode: fmv.x.w ; op1:f30; dest:x17; op1val:0x0; valaddr_reg:x20; val_offset:108; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x17, f30, 0x0, 0, x20, 108, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_28:// rs1==f8, rd==x23, 
// opcode: fmv.x.w ; op1:f8; dest:x23; op1val:0x0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x23, f8, 0x0, 0, x16, 112, x17, x15, 0, x18)

inst_29:// rs1==f10, rd==x5, 
// opcode: fmv.x.w ; op1:f10; dest:x5; op1val:0x0; valaddr_reg:x16; val_offset:116; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x5, f10, 0x0, 0, x16, 116, x17, x15, 16, x18)

inst_30:// rs1==f27, rd==x24, 
// opcode: fmv.x.w ; op1:f27; dest:x24; op1val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x24, f27, 0x0, 0, x16, 120, x17, x15, 32, x18)

inst_31:// rs1==f21, rd==x4, 
// opcode: fmv.x.w ; op1:f21; dest:x4; op1val:0x0; valaddr_reg:x16; val_offset:124; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x4, f21, 0x0, 0, x16, 124, x17, x15, 48, x18)

inst_32:// fs1 == 1 and fe1 == 0x7f and fm1 == 0x0147ae and rm_val == 0  
// opcode: fmv.x.w ; op1:f31; dest:x31; op1val:0xbf8147ae; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.w, x31, f31, 0x0, 0, x16, 128, x17, x15, 64, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.word 0x3f8ccccc
.word 0xbf800000
.word 0x3f666666
.word 0x3f63d70a
.word 0x3f7d70a3
.word 0x3de147ae
.word 0xbf7d70a3
.word 0xbdcccccc
.word 0xbf666666
.word 0xbde147ae
.word 0x3c23d70a
.word 0x3f800000
.word 0x3f8e147a
.word 0xbc23d70a
.word 0xbf8ccccc
.word 0x3dcccccc
.word 0x3f8147ae
.word 0x7f0
.word 0xbf8147ae
.word 0xbf8e147a
.word 0xbf63d70a
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0x0
.word 0xbf8147ae
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 10*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x19_2:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 10*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
